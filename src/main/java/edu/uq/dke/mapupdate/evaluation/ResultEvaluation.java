package edu.uq.dke.mapupdate.evaluation;

import edu.uq.dke.mapupdate.util.io.CSVRawMapReader;
import edu.uq.dke.mapupdate.util.object.datastructure.Pair;
import edu.uq.dke.mapupdate.util.object.datastructure.TrajectoryMatchingResult;
import edu.uq.dke.mapupdate.util.object.roadnetwork.RoadNetworkGraph;
import edu.uq.dke.mapupdate.util.object.roadnetwork.RoadWay;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

import static edu.uq.dke.mapupdate.Main.ROOT_PATH;

/**
 * Created by uqpchao on 10/07/2017.
 */
public class ResultEvaluation {

    public List<String> getMapMatchingResult() {
        return mapMatchingResult;
    }

    public List<String> getMapUpdateResult() {
        return mapUpdateResult;
    }

    private List<String> mapMatchingResult = new ArrayList<>();
    private List<String> mapUpdateResult = new ArrayList<>();

    /**
     * Evaluate the precision, recall and F-score of the Beijing map-matching
     *
     * @param matchedResult     The matching results of map-matching algorithm
     * @param groundTruthResult The ground-truth matching results
     * @param currentMap        The map used in current map-matching
     * @param removedEdges      The removed edges, the combination of removed edges and currentMap will generate a complete road way dictionary
     */
    public void beijingMapMatchingEval(List<TrajectoryMatchingResult> matchedResult, List<Pair<Integer, List<String>>>
            groundTruthResult, RoadNetworkGraph currentMap, List<RoadWay> removedEdges) {

        DecimalFormat df = new DecimalFormat("0.000");
        // insert all ground truth road match into gtResultList
        Map<Integer, HashSet<String>> gtResultList = new HashMap<>();
        for (Pair<Integer, List<String>> gtResult : groundTruthResult) {
            HashSet<String> gtRoadIDList = new HashSet<>(gtResult._2());
            gtResultList.put(gtResult._1(), gtRoadIDList);
        }

        // prepare the mapping of road id to road way length
        Map<String, Double> id2RoadLength = new HashMap<>();
        for (RoadWay w : currentMap.getWays())
            id2RoadLength.put(w.getID(), w.getRoadLength());
        for (RoadWay w : removedEdges) {
            if (!id2RoadLength.containsKey(w.getID()))
                id2RoadLength.put(w.getID(), w.getRoadLength());
        }
        // start the count
        double totalCorrectlyMatchedLength = 0;      // total length of perfectly matched road ways
        double totalMatchedLength = 0;    // total length of the road ways that are matched incorrectly
        double totalGroundTruthLength = 0;    // total length of the ground-truth road ways

        for (TrajectoryMatchingResult r : matchedResult) {
            Set<String> matchRoadIDSet = new LinkedHashSet<>(r.getBestMatchWayList());
            double currMatchedLength = 0;
            // summarize all matched road length
            for (String s : matchRoadIDSet) {
                currMatchedLength += id2RoadLength.get(s);
            }
            double correctlyMatchedLength = 0;
            // check the coverage of the roads found in our match
            HashSet<String> groundTruthIDList = gtResultList.get(Integer.parseInt(r.getTrajID()));
            if (groundTruthIDList == null)
                throw new NullPointerException("ERROR! Ground-truth of " + r.getTrajID() + " is not found.");
            double currGroundTruthLength = 0;
            for (String s : groundTruthIDList) {
                double currLength = id2RoadLength.get(s);
                currGroundTruthLength += currLength;
                if (matchRoadIDSet.contains(s)) {
                    correctlyMatchedLength += currLength;
                }
            }

            totalCorrectlyMatchedLength += correctlyMatchedLength;
            totalMatchedLength += currMatchedLength;
            totalGroundTruthLength += currGroundTruthLength;
        }

        double precision = totalCorrectlyMatchedLength / totalMatchedLength;
        double recall = totalCorrectlyMatchedLength / totalGroundTruthLength;
        double fScore = 2 * (precision * recall / (precision + recall));
        String precisionString = df.format(precision * 100);
        String recallString = df.format(recall * 100);
        String fMeasureString = df.format(fScore * 100);
        mapMatchingResult.add(precisionString + "," + recallString + "," + fMeasureString);
        System.out.println("Map-matching result evaluated, precision: " + precisionString + "%, recall:" + recallString +
                "%, F-score: " + fMeasureString + "%.");
    }

    /**
     * The precision/recall/f-measure evaluation of the matching result in Global dataset
     *
     * @param matchedResult     Matching results generated by algorithm
     * @param groundTruthResult The ground-truth matching result
     */
    public void globalPrecisionRecallCalc(List<TrajectoryMatchingResult> matchedResult, List<Pair<Integer, List<String>>> groundTruthResult) throws IOException {
        // insert all ground truth road match into globalCompareList
        DecimalFormat df = new DecimalFormat(".00000");
        Map<Integer, HashSet<String>> globalCompareList = new HashMap<>();
        for (Pair<Integer, List<String>> gtResult : groundTruthResult) {
            HashSet<String> gtRoadIDList = new LinkedHashSet<>(gtResult._2());
            globalCompareList.put(gtResult._1(), gtRoadIDList);
        }

        // start the comparison
        double totalCorrectlyMatchedLength = 0;      // total length of perfectly matched road ways
        double totalMatchedLength = 0;    // total length of the road ways that are matched incorrectly
        double totalGroundTruthLength = 0;    // total length of the ground-truth road ways
        CSVRawMapReader mapReader = new CSVRawMapReader(ROOT_PATH + "input/");

        for (TrajectoryMatchingResult r : matchedResult) {

            // read the corresponding map to extract actual length of each road
            RoadNetworkGraph currMap = mapReader.readRawMap(Integer.parseInt(r.getTrajID()));
            Map<String, Double> id2RoadLength = new HashMap<>();
            for (RoadWay w : currMap.getWays())
                id2RoadLength.put(w.getID(), w.getRoadLength());

            Set<String> matchRoadIDSet = new LinkedHashSet<>(r.getBestMatchWayList());
            double currMatchedLength = 0;
            // summarize all matched road length
            for (String s : matchRoadIDSet) {
                currMatchedLength += id2RoadLength.get(s);
            }
            double correctlyMatchedLength = 0;
            // check the coverage of the roads found in our match
            HashSet<String> groundTruthIDList = globalCompareList.get(Integer.parseInt(r.getTrajID()));
            double currGroundTruthLength = 0;
            for (String s : groundTruthIDList) {
                double currLength = id2RoadLength.get(s);
                currGroundTruthLength += currLength;
                if (matchRoadIDSet.contains(s)) {
                    correctlyMatchedLength += currLength;
                }
            }
            System.out.println("Trajectory " + r.getTrajID() + ": Precision=" + correctlyMatchedLength / currMatchedLength + ", " +
                    "recall=" + correctlyMatchedLength / currGroundTruthLength);
            totalMatchedLength += currMatchedLength;
            totalCorrectlyMatchedLength += correctlyMatchedLength;
            totalGroundTruthLength += currGroundTruthLength;
        }

        double precision = totalCorrectlyMatchedLength / totalMatchedLength;
        double recall = totalCorrectlyMatchedLength / totalGroundTruthLength;
        double fScore = 2 * (precision * recall / (precision + recall));
        System.out.println("Map-matching result evaluated, precision: " + df.format(precision * 100) + "%, recall:" + df.format(recall * 100) +
                "%, F-score: " + df.format(fScore * 100) + "%.");
    }

    /**
     * The precision/recall/f-measure of map update result in Beijing dataset.
     *
     * @param inferenceMap   Final output of the inference map.
     * @param removedWayList List of originally removed edges.
     * @param inputMap       The original input map.
     */
    public void beijingMapUpdateEval(RoadNetworkGraph inferenceMap, List<RoadWay> removedWayList, RoadNetworkGraph inputMap) {
        // insert all ground truth road match into gtResultList
        DecimalFormat df = new DecimalFormat("0.000");
        HashSet<String> originalRoadSet = new HashSet<>();
        HashMap<String, Double> id2RemovedLength = new HashMap<>();
        HashSet<String> inferenceRoadSet = new HashSet<>();
        // start the count
        double totalFoundRoadLength = 0;      // total length of the removed roads found in the new map(inferred road length)
        double totalFoundRoadOriginalLength = 0;      // total length of the removed roads found in the new map(original road length)
        double totalNewRoadLength = 0;    // total length of the road ways that are matched incorrectly
        double totalGroundTruthLength = 0;    // total length of the ground-truth road ways
        double totalFoundRoadCount = 0;     // total number of removed road found
        double totalNewRoadCount = 0;     // total number of removed road found

        // insert the raw map and removed road information into the dictionary
        for (RoadWay gtResult : inputMap.getWays())
            originalRoadSet.add(gtResult.getID());
        for (RoadWay removedEdges : removedWayList) {
            if (!id2RemovedLength.containsKey(removedEdges.getID())) {
                id2RemovedLength.put(removedEdges.getID(), removedEdges.getRoadLength());
                totalGroundTruthLength += removedEdges.getRoadLength();
            } else
                System.out.println("ERROR! The road " + removedEdges.getID() + " has been removed more than once.");
        }

        for (RoadWay w : inferenceMap.getWays()) {
            if (!inferenceRoadSet.contains(w.getID())) {
                inferenceRoadSet.add(w.getID());
            } else System.out.println("ERROR! Same road ID occurs more than once!");
            if (id2RemovedLength.containsKey(w.getID())) {
                totalFoundRoadLength += w.getRoadLength();
                totalFoundRoadOriginalLength += id2RemovedLength.get(w.getID());
                totalFoundRoadCount++;
            } else if (!originalRoadSet.contains(w.getID())) {
                totalNewRoadLength += w.getRoadLength();
                totalNewRoadCount++;
            }
        }

        double precision = totalFoundRoadLength / (totalNewRoadLength + totalFoundRoadLength);
        double recall = totalFoundRoadLength / totalGroundTruthLength;
        double fScore = 2 * (precision * recall / (precision + recall));
        double roadDiff = Math.abs(totalFoundRoadLength - totalFoundRoadOriginalLength) / totalFoundRoadOriginalLength;

        String precisionString = df.format(precision * 100);
        String recallString = df.format(recall * 100);
        String fMeasureString = df.format(fScore * 100);
        mapMatchingResult.add(precisionString + "," + recallString + "," + fMeasureString);
        System.out.println("Map update result evaluation complete, precision: " + precisionString + "%, recall:" + recallString +
                "%, F-score: " + fMeasureString + "%.");
        System.out.println("Total number of roads found: " + totalFoundRoadCount + ", missing roads: " + (removedWayList.size() - totalFoundRoadCount) + ", wrong roads: " + totalNewRoadCount + ".");

        if (totalFoundRoadLength > totalFoundRoadOriginalLength)
            System.out.print("Overall, the inferred roads are longer than original road by ");
        else
            System.out.print("Overall, the inferred roads are longer than original road by ");
        System.out.println(df.format(roadDiff * 100) + "%");
    }
}